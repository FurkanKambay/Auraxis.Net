using System; using System.Net.WebSockets; using System.Threading; using System.Threading.Tasks;  namespace Auraxis.Net.ConsoleApp {     internal class Program     {         //List<WorldStatHistory> result = await Auraxis.PC.Query<WorldStatHistory>()         //    .Where(x => x.AllTime).IsGreaterThan(100)         //    .Take(10)         //    .GetAsync();         //_ = result[0].DayValues;         //var q = await Auraxis.PC.Query<Character>()         //    .Where(c => c.Name.First).IsEqualTo("RedMuerte")         //    .GetAsync();         //var qAbility = Auraxis.PC.Query<Ability>();         //var qMap = Auraxis.PC.Query<Map>(Server.Cobalt, Continent.Esamir, Continent.Indar);         // .Where(p => p.TempValue.DayValues[08]).IsGreaterThan(0);         //var r = await qMap.GetAsync();          private static async Task Main(string[] args)         {             //void OnLogin() { }             //void OnLogout() { }              //var a = EventStreaming.Log;             //EventStreaming.PlayerLogin += OnLogin;             //EventStreaming.PlayerLogout += OnLogout;             //EventStreaming.PlayerLogin -= OnLogin;             //EventStreaming.PlayerLogout -= OnLogout;              var socket = new ClientWebSocket();             var cts = new CancellationTokenSource();              //socket.ConnectAsync()              var input = Console.ReadLine();             if (input == "CLOSE")             {                 cts.Cancel();                 //await socket.CloseAsync();             }         }     } } 